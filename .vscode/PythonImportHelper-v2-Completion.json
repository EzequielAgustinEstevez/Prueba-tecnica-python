[
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "zipfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "zipfile",
        "description": "zipfile",
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "urllib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib",
        "description": "urllib",
        "detail": "urllib",
        "documentation": {}
    },
    {
        "label": "urllib.request",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib.request",
        "description": "urllib.request",
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "index",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "csv_to_json",
        "kind": 2,
        "importPath": "beta.cvsToJson",
        "description": "beta.cvsToJson",
        "peekOfCode": "def csv_to_json(csvFilePath, jsonFilePath):\n    print('Interpret csv data to code')\n    time.sleep(4)\n    # Open csv file\n    with open(csvFilePath, encoding='utf-8') as csvf:\n        # read csv file data using the csv library's dictionary delimiter by \",\"\n        csvReader = csv.reader(csvf, delimiter=',')\n        # Ignore first line\n        next(csvReader)\n        # for loop to",
        "detail": "beta.cvsToJson",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "beta.cvsToJson",
        "description": "beta.cvsToJson",
        "peekOfCode": "url = r'https://www.jodidata.org/_resources/files/downloads/gas-data/jodi_gas_csv_beta.zip'\nextract_dir = './'\noutput = r'./jodi_gas_csv_beta.zip'\n#UnZip\nprint('Unziping')\nzip_path, _ = urllib.request.urlretrieve(url)\nwith zipfile.ZipFile(zip_path, \"r\") as f:\n    f.extractall(extract_dir)\n# Program\ndef csv_to_json(csvFilePath, jsonFilePath):",
        "detail": "beta.cvsToJson",
        "documentation": {}
    },
    {
        "label": "extract_dir",
        "kind": 5,
        "importPath": "beta.cvsToJson",
        "description": "beta.cvsToJson",
        "peekOfCode": "extract_dir = './'\noutput = r'./jodi_gas_csv_beta.zip'\n#UnZip\nprint('Unziping')\nzip_path, _ = urllib.request.urlretrieve(url)\nwith zipfile.ZipFile(zip_path, \"r\") as f:\n    f.extractall(extract_dir)\n# Program\ndef csv_to_json(csvFilePath, jsonFilePath):\n    print('Interpret csv data to code')",
        "detail": "beta.cvsToJson",
        "documentation": {}
    },
    {
        "label": "output",
        "kind": 5,
        "importPath": "beta.cvsToJson",
        "description": "beta.cvsToJson",
        "peekOfCode": "output = r'./jodi_gas_csv_beta.zip'\n#UnZip\nprint('Unziping')\nzip_path, _ = urllib.request.urlretrieve(url)\nwith zipfile.ZipFile(zip_path, \"r\") as f:\n    f.extractall(extract_dir)\n# Program\ndef csv_to_json(csvFilePath, jsonFilePath):\n    print('Interpret csv data to code')\n    time.sleep(4)",
        "detail": "beta.cvsToJson",
        "documentation": {}
    },
    {
        "label": "csvFilePath",
        "kind": 5,
        "importPath": "beta.cvsToJson",
        "description": "beta.cvsToJson",
        "peekOfCode": "csvFilePath = r'./jodi_gas_beta.csv'\njsonFilePath = r'./data.json'\ncsv_to_json(csvFilePath, jsonFilePath)",
        "detail": "beta.cvsToJson",
        "documentation": {}
    },
    {
        "label": "jsonFilePath",
        "kind": 5,
        "importPath": "beta.cvsToJson",
        "description": "beta.cvsToJson",
        "peekOfCode": "jsonFilePath = r'./data.json'\ncsv_to_json(csvFilePath, jsonFilePath)",
        "detail": "beta.cvsToJson",
        "documentation": {}
    },
    {
        "label": "csv_to_json",
        "kind": 2,
        "importPath": "final.cvsToJsonV2",
        "description": "final.cvsToJsonV2",
        "peekOfCode": "def csv_to_json(csvFilePath, jsonFilePath):\n    print('Processing output csv data to json')\n    time.sleep( 4 )    # Open the json file to enter line by line the result of the loop for\n    dataJson = open(jsonFilePath, 'w')\n    # Open csv file\n    with open(csvFilePath, encoding='utf-8') as csvf:\n        # read csv file data using the csv library, delimiter by\",\"\n        csvReader = csv.reader(csvf, delimiter=',')\n        # Ignore first line\n        next(csvReader)",
        "detail": "final.cvsToJsonV2",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "final.cvsToJsonV2",
        "description": "final.cvsToJsonV2",
        "peekOfCode": "url = r'https://www.jodidata.org/_resources/files/downloads/gas-data/jodi_gas_csv_beta.zip'\nextract_dir = './'\n#UnZip\nprint('Download jodi_gas_csv_beta.zip')\nzip_path, _ = urllib.request.urlretrieve(url)\nwith zipfile.ZipFile(zip_path, \"r\") as f:\n    print('Unzip')\n    f.extractall(extract_dir)\n# Program\ndef csv_to_json(csvFilePath, jsonFilePath):",
        "detail": "final.cvsToJsonV2",
        "documentation": {}
    },
    {
        "label": "extract_dir",
        "kind": 5,
        "importPath": "final.cvsToJsonV2",
        "description": "final.cvsToJsonV2",
        "peekOfCode": "extract_dir = './'\n#UnZip\nprint('Download jodi_gas_csv_beta.zip')\nzip_path, _ = urllib.request.urlretrieve(url)\nwith zipfile.ZipFile(zip_path, \"r\") as f:\n    print('Unzip')\n    f.extractall(extract_dir)\n# Program\ndef csv_to_json(csvFilePath, jsonFilePath):\n    print('Processing output csv data to json')",
        "detail": "final.cvsToJsonV2",
        "documentation": {}
    },
    {
        "label": "csvFilePath",
        "kind": 5,
        "importPath": "final.cvsToJsonV2",
        "description": "final.cvsToJsonV2",
        "peekOfCode": "csvFilePath = r'./jodi_gas_beta.csv'\njsonFilePath = r'./data.json'\ncsv_to_json(csvFilePath, jsonFilePath)",
        "detail": "final.cvsToJsonV2",
        "documentation": {}
    },
    {
        "label": "jsonFilePath",
        "kind": 5,
        "importPath": "final.cvsToJsonV2",
        "description": "final.cvsToJsonV2",
        "peekOfCode": "jsonFilePath = r'./data.json'\ncsv_to_json(csvFilePath, jsonFilePath)",
        "detail": "final.cvsToJsonV2",
        "documentation": {}
    },
    {
        "label": "csv_file_name",
        "kind": 5,
        "importPath": "resuelto.asd",
        "description": "resuelto.asd",
        "peekOfCode": "csv_file_name = \"./jodi_gas_beta.csv\"\njson_file_name = \"./resultado.json\"\nprint(f'Processando o arquivo {csv_file_name}')\ntry:\n    arquivo_json = open(json_file_name, 'w')\n    with open(csv_file_name) as csvfile:\n        readCSV = csv.reader(csvfile, delimiter=',')\n        next(readCSV)\n        for row in readCSV:\n            data = {} #Dictionary que irá armazenar o conteúdo de cada linha",
        "detail": "resuelto.asd",
        "documentation": {}
    },
    {
        "label": "json_file_name",
        "kind": 5,
        "importPath": "resuelto.asd",
        "description": "resuelto.asd",
        "peekOfCode": "json_file_name = \"./resultado.json\"\nprint(f'Processando o arquivo {csv_file_name}')\ntry:\n    arquivo_json = open(json_file_name, 'w')\n    with open(csv_file_name) as csvfile:\n        readCSV = csv.reader(csvfile, delimiter=',')\n        next(readCSV)\n        for row in readCSV:\n            data = {} #Dictionary que irá armazenar o conteúdo de cada linha\n            points = [] #Lista para armazenar data e numero",
        "detail": "resuelto.asd",
        "documentation": {}
    }
]